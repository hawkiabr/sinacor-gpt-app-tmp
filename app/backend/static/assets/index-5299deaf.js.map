{"version":3,"mappings":"koCAwCA,eAAeA,IAAqC,CAC1C,MAAAC,EAAW,MAAM,MAAM,aAAa,EACtC,IAACA,EAAS,GACV,MAAM,IAAI,MAAM,mCAAmCA,EAAS,MAAM,EAAE,EAEjE,aAAMA,EAAS,MAC1B,CAEA,MAAMC,EAAY,MAAMF,KAEXG,EAAWD,EAAU,SAOrBE,GAAaF,EAAU,WAQvBG,GAAeH,EAAU,aAEhCI,GAAeJ,EAAU,aAGlBK,GAAiB,IACnB,OAAO,SAAS,OAASL,EAAU,WAAW,KAAK,YAKjDM,GAAYC,GACdA,EACF,mBAAmB,CAChB,GAAGH,GACH,YAAaC,GAAe,EAC/B,EACA,MAAeG,GAAA,CACZ,QAAQ,IAAIA,CAAK,CACV,CACV,wuBCrFMC,GAAA,0BCQFC,GAAc,IAAM,CACvB,MAAE,SAAAC,GAAaC,KACfC,EAAgBF,EAAS,mBACzBG,EAAmB,IAAM,CAM3BH,EACK,WAAW,CACR,GAAGR,GACH,YAAaE,GAAe,EAC/B,EACA,SAAe,QAAQ,IAAIG,CAAK,CAAC,GAEpCO,EAAoB,IAAM,CAC5BJ,EACK,YAAY,CACT,sBAAuB,IACvB,QAASA,EAAS,iBAAiB,EACtC,EACA,SAAe,QAAQ,IAAIH,CAAK,CAAC,GAEpCQ,EAAa;AAAA,EAAWH,GAAe,QAAQ,GAEjD,OAAAI,EAAA,IAACC,GAAA,CACG,KAAML,EAAgBG,EAAa,QACnC,UAAWG,GAAO,YAClB,QAASN,EAAgBE,EAAoBD,EAE7C,SAACG,EAAA,WAAI,IAAKR,GAAI,IAAI,UAAU,aAAW,KAAK,MAAM,OAAO,OAAO,OAAO,UAAWU,GAAO,OAAQ,GAG7G,EC9BMC,GAAS,IAENC,OAAA,OAAI,UAAWF,EAAO,OACnB,UAACF,EAAA,cAAO,UAAWE,EAAO,OAAQ,KAAM,SACpC,SAACE,OAAA,OAAI,UAAWF,EAAO,gBACnB,UAAAF,EAAA,IAACK,GAAK,IAAG,IAAI,UAAWH,EAAO,qBAC3B,SAACF,EAAA,UAAG,UAAWE,EAAO,YAAa,sBAAW,GAClD,QACC,MACG,UAAAE,EAAA,KAAC,KAAG,WAAWF,EAAO,cAClB,UAAAF,MAAC,MACG,SAACA,MAAAM,GAAA,CAAQ,GAAG,IAAI,UAAW,CAAC,CAAE,SAAAC,KAAgBA,EAAWL,EAAO,wBAA0BA,EAAO,kBAAoB,eAErH,GACJ,EACAF,MAAC,MAAG,UAAWE,EAAO,oBAClB,SAACF,MAAAM,GAAA,CAAQ,GAAG,MAAM,UAAW,CAAC,CAAE,SAAAC,CAAA,IAAgBA,EAAWL,EAAO,wBAA0BA,EAAO,kBAAoB,qBAEvH,CACJ,IACJ,CACJ,GACCF,EAAA,UAAG,UAAWE,EAAO,gBAAiB,SAAY,iBAClDlB,SAAaS,GAAY,KAC9B,CACJ,SAECe,GAAO,GACZ,yvBCxCFC,GAAc,GAKpB,SAASC,GAAWC,EAAqD,CACrE,IAAIC,EAAkC,CAClC,eAAgB,oBAGpB,OAAI5B,GACI2B,IACQC,EAAA,cAAmB,UAAUD,CAAO,IAI7CC,CACX,CAEsB,eAAAC,GAAOC,EAAyBH,EAAuD,CACzG,MAAM7B,EAAW,MAAM,MAAM,GAAG2B,EAAW,OAAQ,CAC/C,OAAQ,OACR,QAASC,GAAWC,CAAO,EAC3B,KAAM,KAAK,UAAUG,CAAO,EAC/B,EAEKC,EAAyC,MAAMjC,EAAS,OAC9D,GAAIA,EAAS,OAAS,KAAO,CAACA,EAAS,GAC7B,YAAMiC,EAAe,OAAS,eAAe,EAGhD,OAAAA,CACX,CAEsB,eAAAC,GAAQF,EAAyBH,EAAgD,CACnG,OAAO,MAAM,MAAM,GAAGF,EAAW,QAAS,CACtC,OAAQ,OACR,QAASC,GAAWC,CAAO,EAC3B,KAAM,KAAK,UAAUG,CAAO,EAC/B,CACL,CAEO,SAASG,GAAoBC,EAA0B,CACnD,SAAGT,EAAW,YAAYS,CAAQ,EAC7C,CC5CkB,IAAAC,OACdA,EAAA,OAAS,SACTA,EAAA,QAAU,UACVA,EAAA,KAAO,OAHOA,OAAA,0mBCQF,SAAAC,GAAkBC,EAAgBC,EAAsBC,EAAyE,CAC7I,MAAMC,EAAsB,GAGxB,IAAAC,EAAeJ,EAAO,OAG1B,GAAIC,EAAa,CACb,IAAII,EAAYD,EAAa,OAC7B,QAASE,EAAIF,EAAa,OAAS,EAAGE,GAAK,GACnCF,EAAaE,CAAC,IAAM,IADkBA,IAG/B,GAAAF,EAAaE,CAAC,IAAM,IAAK,CACpBD,EAAAC,EACZ,KACJ,CAGWF,EADSA,EAAa,UAAU,EAAGC,CAAS,CAE/D,CA0BO,OACH,WAzBUD,EAAa,MAAM,eAAe,EAEd,IAAI,CAACG,EAAMC,IAAU,CAC/C,GAAAA,EAAQ,IAAM,EACP,OAAAD,EACJ,CACC,IAAAE,EACAN,EAAU,QAAQI,CAAI,IAAM,GACZE,EAAAN,EAAU,QAAQI,CAAI,EAAI,GAE1CJ,EAAU,KAAKI,CAAI,EACnBE,EAAgBN,EAAU,QAGxB,MAAAO,EAAOd,GAAoBW,CAAI,EAE9B,OAAAI,GACFhC,EAAA,SAAE,UAAU,eAAe,MAAO4B,EAAM,QAAS,IAAML,EAAkBQ,CAAI,EAC1E,SAAC/B,MAAA,OAAK,UAAc,GACxB,EAER,EACH,EAGyB,KAAK,EAAE,EAC7B,UAAAwB,CAAA,CAER,CCtDO,MAAMS,GAAa,UACdC,GAAa,aAAa,yBAA0B,cAAY,OAAO,aAAW,aAAc,GCiB/FC,GAAS,CAAC,CACnB,OAAAd,EACA,WAAAe,EACA,YAAAd,EACA,kBAAAC,EACA,wBAAAc,EACA,2BAAAC,EACA,0BAAAC,EACA,sBAAAC,CACJ,IAAa,CACT,MAAMC,EAAoBpB,EAAO,QAAQ,CAAC,EAAE,QAAQ,mBAC9CqB,EAAiBrB,EAAO,QAAQ,CAAC,EAAE,QAAQ,QAC3CI,EAAekB,UAAQ,IAAMvB,GAAkBsB,EAAgBpB,EAAaC,CAAiB,EAAG,CAACF,CAAM,CAAC,EAExGuB,EAAsBC,GAAU,SAASpB,EAAa,UAAU,EAEtE,OACKrB,OAAA0C,EAAA,CAAM,UAAW,GAAG5C,EAAO,eAAe,IAAIkC,GAAclC,EAAO,QAAQ,GAAI,cAAc,gBAC1F,UAACF,MAAA8C,EAAM,KAAN,CACG,SAAA1C,EAAA,KAAC0C,GAAM,WAAU,GAAC,gBAAgB,gBAC9B,UAAA9C,EAAA,IAACiC,GAAW,WACX,MACG,WAAAjC,EAAA,IAAC+C,GAAA,CACG,MAAO,CAAE,MAAO,OAAQ,EACxB,UAAW,CAAE,SAAU,WAAY,EACnC,MAAM,iCACN,UAAU,iCACV,QAAS,IAAMV,EAAwB,EACvC,SAAU,CAAChB,EAAO,QAAQ,CAAC,EAAE,QAAQ,UAAU,OACnD,EACArB,EAAA,IAAC+C,GAAA,CACG,MAAO,CAAE,MAAO,OAAQ,EACxB,UAAW,CAAE,SAAU,eAAgB,EACvC,MAAM,4BACN,UAAU,4BACV,QAAS,IAAMT,EAA2B,EAC1C,SAAU,CAACjB,EAAO,QAAQ,CAAC,EAAE,QAAQ,aAAa,OACtD,GACJ,GACJ,CACJ,SAECyB,EAAM,KAAN,CAAW,KAAI,GACZ,SAAC9C,MAAA,OAAI,UAAWE,EAAO,WAAY,wBAAyB,CAAE,OAAQ0C,CAAA,CAAuB,GACjG,EAEC,CAAC,CAACnB,EAAa,UAAU,QACtBzB,EAAA,IAAC8C,EAAM,KAAN,CACG,gBAACA,EAAM,YAAU,GAAC,KAAI,GAAC,OAAQ,CAAE,YAAa,CAC1C,YAAA9C,EAAA,IAAC,OAAK,WAAWE,EAAO,kBAAmB,SAAW,gBACrDuB,EAAa,UAAU,IAAI,CAACuB,EAAGrB,IAAM,CAC5B,MAAAI,EAAOd,GAAoB+B,CAAC,EAClC,aACK,IAAU,WAAW9C,EAAO,SAAU,MAAO8C,EAAG,QAAS,IAAMzB,EAAkBQ,CAAI,EACjF,SAAG,KAAEJ,CAAC,KAAKqB,CAAC,IADTrB,CAER,EAEP,GACL,CACJ,GAGH,CAAC,CAACc,GAAmB,QAAUD,GAAyBD,GACpDvC,EAAA,IAAA8C,EAAM,KAAN,CACG,SAAC1C,OAAA0C,EAAA,CAAM,WAAU,GAAC,KAAI,GAAC,UAAW,GAAKrB,EAAa,UAAU,OAASvB,EAAO,sBAAwB,EAAE,GAAI,OAAQ,CAAE,YAAa,CAC/H,YAAAF,EAAA,IAAC,OAAK,WAAWE,EAAO,0BAA2B,SAAW,gBAC7DuC,EAAkB,IAAI,CAACO,EAAGrB,IAElB3B,MAAA,KAAU,UAAWE,EAAO,iBAAkB,MAAO8C,EAAG,QAAS,IAAMT,EAA0BS,CAAC,EAC9F,SAAG,GAAAA,CAAC,IADDrB,CAER,CAEP,GACL,CACJ,EAER,GAER,EC7FasB,GAAgB,IAAM,CAC/B,MAAMC,EAAiBC,GAAU,CAC7B,KAAM,CAAE,QAAS,CAAE,EACnB,GAAI,CAAE,QAAS,CAAE,EACpB,EAED,OACKnD,MAAAoD,GAAS,IAAT,CAAa,MAAO,CAAE,GAAGF,GACtB,gBAACJ,EAAM,WAAW5C,EAAO,gBAAiB,cAAc,gBACpD,UAAAF,EAAA,IAACiC,GAAW,IACZjC,MAAC8C,EAAM,KAAN,CAAW,KAAI,GACZ,SAAC1C,EAAA,UAAE,UAAWF,EAAO,WAAY,wBAE5BF,MAAA,QAAK,UAAWE,EAAO,WAAa,IACzC,CACJ,GACJ,EACJ,EAER,ECfamD,GAAc,CAAC,CAAE,MAAA9D,EAAO,QAAA+D,YAE5BR,EAAM,WAAW5C,EAAO,gBAAiB,cAAc,gBACpD,UAAAF,MAACuD,IAAqB,cAAY,OAAO,aAAW,aAAa,YAAY,MAAM,EAElFvD,EAAA,IAAA8C,EAAM,KAAN,CAAW,KAAI,GACZ,SAAC9C,EAAA,SAAE,UAAWE,EAAO,WAAa,SAAAX,CAAM,GAC5C,EAEAS,MAACwD,IAAc,UAAWtD,EAAO,YAAa,QAASoD,EAAS,KAAK,kBAAkB,CAC3F,oNCNKG,GAAgB,CAAC,CAAE,OAAAC,EAAQ,SAAAC,EAAU,YAAAC,EAAa,YAAAC,KAAyB,CACpF,KAAM,CAACC,EAAUC,CAAW,EAAIC,WAAiB,EAAE,EAE7CC,EAAe,IAAM,CACnBN,GAAY,CAACG,EAAS,SAI1BJ,EAAOI,CAAQ,EAEXD,GACAE,EAAY,EAAE,EAClB,EAGEG,EAAgBC,GAAqC,CACnDA,EAAG,MAAQ,SAAW,CAACA,EAAG,WAC1BA,EAAG,eAAe,EACLF,IACjB,EAGEG,EAAmB,CAACC,EAA8DC,IAAsB,CACrGA,EAEMA,EAAS,QAAU,KAC1BP,EAAYO,CAAQ,EAFpBP,EAAY,EAAE,CAGlB,EAGEQ,EAAuBZ,GAAY,CAACG,EAAS,KAAK,EAExD,cACKhB,EAAM,YAAU,GAAC,UAAW5C,GAAO,uBAChC,UAAAF,EAAA,IAACwE,GAAA,CACG,UAAWtE,GAAO,sBAClB,YAAA0D,EACA,UAAS,GACT,UAAW,GACX,WAAU,GACV,MAAOE,EACP,SAAUM,EACV,UAAWF,CAAA,CACf,EACAlE,EAAA,IAAC,MAAI,WAAWE,GAAO,8BACnB,SAACF,MAAAyE,GAAA,CAAQ,QAAQ,oBAAoB,aAAa,QAC9C,SAACzE,MAAA0E,GAAA,CAAO,KAAK,QAAQ,KAAO1E,EAAA,IAAA2E,GAAA,CAAa,YAAY,wBAAyB,GAAI,SAAUJ,EAAsB,QAASN,CAAc,EAC7I,GACJ,CACJ,GAER,mICzDaW,GAAU,CAAC,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,WAE9B,MAAI,WAAW7E,GAAO,QAAS,QAAS,IAAM6E,EAAQD,CAAK,EACxD,eAAC,IAAE,WAAW5E,GAAO,YAAc,WAAK,CAC5C,GCHF8E,GAA2B,CAC7B,CACI,KAAM,kDACN,MAAO,iDACX,EACA,CACI,KAAM,sEACN,MAAO,qEACX,EACA,CAAE,KAAM,mDAAoD,MAAO,kDAAmD,CAC1H,EAMaC,GAAc,CAAC,CAAE,iBAAAC,KAEtBlF,EAAA,IAAC,KAAG,WAAWE,GAAO,gBACjB,YAAS,IAAI,CAAC8C,EAAG,IACbhD,EAAA,UACG,eAAC4E,GAAQ,MAAM5B,EAAE,KAAM,MAAOA,EAAE,MAAO,QAASkC,CAAkB,IAD7D,CAET,CACH,CACL,8EC3BKC,EAAkB,CAAC,CAAE,QAAAC,KAE1BpF,MAAC,MAAI,WAAWE,GAAO,UACnB,SAACF,EAAA,WAAI,UAAWE,GAAO,QAAU,SAAAkF,CAAA,CAAQ,CAC7C,uDCLD,SAASC,GAA2BC,EAA2C,CAG5E,MAAAC,EAAQD,EAAK,MAAM,IAAI,EACvBE,EAAQD,EAAM,CAAC,EACfE,EAAUF,EAAM,MAAM,CAAC,EAAE,KAAK,IAAI,EAEjC,OACH,MAAAC,EACA,QAAAC,CAAA,CAER,2RCRaC,GAAoB,CAAC,CAAE,kBAAAC,KAE5B3F,MAAC,MAAG,UAAWE,EAAO,yBACjB,SAAkByF,EAAA,IAAI,CAAC3C,EAAG,IAAM,CACvB,MAAA4C,EAASP,GAA2BrC,CAAC,EAE3C,OACK5C,OAAA,MAAG,UAAWF,EAAO,sBAClB,UAAAF,MAAC,KAAG,WAAWE,EAAO,4BAA8B,WAAO,MAAM,QAChE,IAAE,WAAWA,EAAO,0BAA4B,WAAO,QAAQ,CACpE,GAEP,EACL,GCrBI,IAAA2F,OACRA,EAAA,kBAAoB,iBACpBA,EAAA,qBAAuB,oBACvBA,EAAA,YAAc,WAHNA,OAAA,ICkBZ,MAAMC,GAAyB,CAAE,SAAU,GAAM,MAAO,CAAE,MAAO,SAEpDC,GAAgB,CAAC,CAAE,OAAA1E,EAAQ,UAAA2E,EAAW,eAAAC,EAAgB,eAAAC,EAAgB,UAAAC,EAAW,mBAAAC,KAAgC,CAC1H,MAAMC,EAAuC,CAAChF,EAAO,QAAQ,CAAC,EAAE,QAAQ,SAClEiF,EAA0C,CAACjF,EAAO,QAAQ,CAAC,EAAE,QAAQ,YAAY,OACjFkF,EAAiC,CAACN,EAElCO,EAAoB3D,GAAU,SAASxB,EAAO,QAAQ,CAAC,EAAE,QAAQ,QAAS,EAG5E,OAAAjB,EAAA,KAACqG,GAAA,CACG,UAAAN,EACA,YAAaH,EACb,YAA0BU,MAAaN,EAAmBM,EAAU,MAAM,OAA6B,EAEvG,UAAA1G,EAAA,IAAC2G,EAAA,CACG,QAASd,EAAkB,kBAC3B,WAAW,yBACX,kBAAmBQ,EAA8BP,GAAyB,OAE1E,SAAA9F,EAAA,IAAC,OAAI,UAAWE,GAAO,eAAgB,wBAAyB,CAAE,OAAQsG,CAAqB,IACnG,EACAxG,EAAA,IAAC2G,EAAA,CACG,QAASd,EAAkB,qBAC3B,WAAW,oBACX,kBAAmBS,EAAiCR,GAAyB,OAE7E,SAAA9F,EAAA,IAAC0F,IAAkB,kBAAmBrE,EAAO,QAAQ,CAAC,EAAE,QAAQ,YAAa,EACjF,EACArB,EAAA,IAAC2G,EAAA,CACG,QAASd,EAAkB,YAC3B,WAAW,UACX,kBAAmBU,EAAwBT,GAAyB,OAEpE,SAAA9F,EAAA,IAAC,UAAO,MAAM,UAAU,IAAKiG,EAAgB,MAAM,OAAO,OAAQC,CAAgB,GACtF,IAGZ,4CC9CaU,GAAiB,CAAC,CAAE,UAAAT,EAAW,QAAApB,WAEnC,MAAI,WAAW,GAAG7E,GAAO,SAAS,IAAIiG,GAAa,EAAE,GAClD,SAAAnG,EAAA,IAAC0E,IAAO,KAAM1E,MAAC6G,KAAkB,EAAI,QAAA9B,EAChC,wBACL,EACJ,6CCLK+B,GAAkB,CAAC,CAAE,UAAAX,EAAW,SAAAxC,EAAU,QAAAoB,WAE9C,MAAI,WAAW,GAAG7E,GAAO,SAAS,IAAIiG,GAAa,EAAE,GAClD,SAACnG,MAAA0E,GAAA,CAAO,KAAO1E,EAAA,IAAA+G,GAAA,CAAgB,GAAI,SAAApD,EAAoB,QAAAoB,EAClD,sBACL,EACJ,GCCFiC,GAAO,IAAM,CACf,KAAM,CAACC,EAAmBC,CAAoB,EAAIlD,WAAS,EAAK,EAC1D,CAACmD,EAAgBC,CAAiB,EAAIpD,WAAiB,EAAE,EACzD,CAACqD,EAAeC,CAAgB,EAAItD,WAAiB,CAAC,EACtD,CAACuD,EAAeC,CAAgB,EAAIxD,WAAwB7C,EAAc,MAAM,EAChF,CAACsG,EAAmBC,CAAoB,EAAI1D,WAAkB,EAAI,EAClE,CAAC2D,EAAcC,CAAe,EAAI5D,WAAkB,EAAI,EACxD,CAAC6D,EAAqBC,CAAsB,EAAI9D,WAAkB,EAAK,EACvE,CAAC+D,EAAiBC,EAAkB,EAAIhE,WAAiB,EAAE,EAC3D,CAACiE,EAA6BC,EAA8B,EAAIlE,WAAkB,EAAK,EACvF,CAACmE,GAAsBC,EAAuB,EAAIpE,WAAkB,EAAK,EACzE,CAACqE,GAAyBC,EAA0B,EAAItE,WAAkB,EAAK,EAE/EuE,EAAkBC,SAAe,EAAE,EACnCC,EAAuBD,SAA8B,IAAI,EAEzD,CAACE,EAAWC,CAAY,EAAI3E,WAAkB,EAAK,EACnD,CAAC1C,GAAasH,CAAc,EAAI5E,WAAkB,EAAK,EACvD,CAACzE,EAAOsJ,CAAQ,EAAI7E,EAAkB,WAEtC,CAACiC,GAAgB6C,CAAiB,EAAI9E,EAAiB,WACvD,CAAC+E,EAAwBC,CAAyB,EAAIhF,WAAwC,MAAS,EAEvG,CAACiF,EAAgBC,EAAiB,EAAIlF,WAAiB,CAAC,EACxD,CAACmF,EAASC,CAAU,EAAIpF,EAAA,SAAsD,CAAE,GAChF,CAACqF,GAAiBC,EAAkB,EAAItF,EAAA,SAAsD,CAAE,GAEhGuF,GAAqB,MAAOzF,EAAkBqF,EAAsCC,EAAsBI,IAAsC,CAClJ,IAAInI,EAAiB,GACjBoI,EAA+B,GAE7B,MAAAC,GAAeC,GACV,IAAI,QAAmBC,IAAA,CAC1B,WAAW,IAAM,CACHvI,GAAAsI,EACV,MAAME,GAAkC,CACpC,GAAGJ,EACH,QAAS,CAAC,CAAE,GAAGA,EAAY,QAAQ,CAAC,EAAG,QAAS,CAAE,QAASpI,EAAQ,KAAMoI,EAAY,QAAQ,CAAC,EAAE,QAAQ,MAAQ,GAEpHH,GAAmB,CAAC,GAAGH,EAAS,CAACrF,EAAU+F,EAAc,CAAC,CAAC,EAC3DD,GAAQ,IAAI,GACb,EAAE,EACR,EAED,IACAhB,EAAe,EAAI,EACF,gBAAAkB,KAASC,GAAiBP,CAAY,EACnD,GAAIM,EAAM,SAAcA,EAAM,QAAW,CAAC,EAAE,SAAcA,EAAM,QAAW,CAAC,EAAE,QAAW,YAC/EA,EAAA,QAAW,CAAC,EAAE,QAAaA,EAAM,QAAW,CAAC,EAAE,MACvCL,EAAAK,UACPA,EAAM,SAAcA,EAAM,QAAW,CAAC,EAAE,MAAS,QACxDnB,EAAa,EAAK,EACZ,MAAAe,GAAYI,EAAM,QAAW,CAAC,EAAE,MAAS,OAAU,UAClDA,EAAM,SAAcA,EAAM,QAAW,CAAC,EAAE,QAE/CL,EAAY,QAAQ,CAAC,EAAE,QAAU,CAAE,GAAGA,EAAY,QAAQ,CAAC,EAAE,QAAS,GAAGK,EAAM,QAAW,CAAC,EAAE,iBACtFA,EAAM,MACP,YAAMA,EAAM,KAAQ,CAElC,QACF,CACElB,EAAe,EAAK,CACxB,CAKO,MAJ+B,CAClC,GAAGa,EACH,QAAS,CAAC,CAAE,GAAGA,EAAY,QAAQ,CAAC,EAAG,QAAS,CAAE,QAASpI,EAAQ,KAAMoI,EAAY,QAAQ,CAAC,EAAE,QAAQ,MAAQ,EAE7G,EAGLnK,EAASN,EAAWW,GAAQ,EAAE,SAAW,OAEzCqK,EAAiB,MAAOlG,GAAqB,CAC/CyE,EAAgB,QAAUzE,EAE1BvE,GAASsJ,EAAS,MAAS,EAC3BF,EAAa,EAAI,EACjBG,EAAkB,MAAS,EAC3BE,EAA0B,MAAS,EAEnC,MAAMiB,EAAQ3K,EAAS,MAAMD,GAASC,CAAM,EAAI,OAE5C,IAMA,MAAMwB,EAA0B,CAC5B,SAAU,CAAC,GANqBqI,EAAQ,QAAae,GAAA,CACrD,CAAE,QAASA,EAAE,CAAC,EAAG,KAAM,MAAO,EAC9B,CAAE,QAASA,EAAE,CAAC,EAAE,QAAQ,CAAC,EAAE,QAAQ,QAAS,KAAM,WAAY,EACjE,EAG2B,CAAE,QAASpG,EAAU,KAAM,OAAQ,EAC3D,OAAQ6D,EACR,QAAS,CACL,UAAW,CACP,gBAAiBR,EAAe,SAAW,EAAI,OAAYA,EAC3D,iBAAkBY,EAAgB,SAAW,EAAI,OAAYA,EAC7D,IAAKV,EACL,eAAgBE,EAChB,gBAAiBE,EACjB,kBAAmBI,EACnB,2BAA4BI,EAC5B,wBAAyBE,GACzB,2BAA4BE,EAChC,CACJ,EAEA,cAAec,EAAQ,OAASA,EAAQA,EAAQ,OAAS,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,EAAE,cAAgB,MAGxFrK,EAAW,MAAMkC,GAAQF,EAASmJ,GAAO,WAAW,EACtD,IAACnL,EAAS,KACV,MAAM,MAAM,kBAAkB,EAElC,GAAI6I,EAAc,CACd,MAAM5G,EAAkC,MAAMwI,GAAmBzF,EAAUqF,EAASC,EAAYtK,EAAS,IAAI,EAC7GsK,EAAW,CAAC,GAAGD,EAAS,CAACrF,EAAU/C,CAAc,CAAC,CAAC,MAChD,CACG,MAAAA,EAAyC,MAAMjC,EAAS,OAC9D,GAAIA,EAAS,OAAS,KAAO,CAACA,EAAS,GAC7B,YAAMiC,EAAe,OAAS,eAAe,EAEvDqI,EAAW,CAAC,GAAGD,EAAS,CAACrF,EAAU/C,CAAiC,CAAC,CAAC,CAC1E,QACKoJ,EAAG,CACRtB,EAASsB,CAAC,SACZ,CACExB,EAAa,EAAK,CACtB,GAGEyB,GAAY,IAAM,CACpB7B,EAAgB,QAAU,GAC1BhJ,GAASsJ,EAAS,MAAS,EAC3BC,EAAkB,MAAS,EAC3BE,EAA0B,MAAS,EACnCI,EAAW,CAAE,GACbE,GAAmB,CAAE,GACrBX,EAAa,EAAK,EAClBC,EAAe,EAAK,GAGdyB,YAAA,IAAM5B,EAAqB,SAAS,eAAe,CAAE,SAAU,SAAU,EAAG,CAACC,CAAS,CAAC,EACvF2B,YAAA,IAAM5B,EAAqB,SAAS,eAAe,CAAE,SAAU,OAAQ,EAAG,CAACY,EAAe,CAAC,EAE/F,MAAAiB,GAAyB,CAACjG,EAA+DC,IAAsB,CACjH8C,EAAkB9C,GAAY,EAAE,GAG9BiG,GAAwB,CAAClG,EAAgDC,IAAsB,CAChFgD,EAAA,SAAShD,GAAY,GAAG,CAAC,GAGxCkG,GAAwB,CAACnG,EAAsCoG,EAAqD5I,IAA+B,CACpI2F,EAAAiD,GAAQ,MAAQtJ,EAAc,MAAM,GAGnDuJ,GAA4B,CAACrG,EAAuDsG,IAAsB,CACvFjD,EAAA,CAAC,CAACiD,CAAO,GAG5BC,GAA8B,CAACvG,EAAuDsG,IAAsB,CACvF7C,EAAA,CAAC,CAAC6C,CAAO,GAG9BE,GAAuB,CAACxG,EAAuDsG,IAAsB,CACvF/C,EAAA,CAAC,CAAC+C,CAAO,GAGvBG,GAA2B,CAACzG,EAAuBC,IAAsB,CAC3E0D,GAAmB1D,GAAY,EAAE,GAG/ByG,GAAsC,CAAC1G,EAAuDsG,IAAsB,CACvFzC,GAAA,CAAC,CAACyC,CAAO,GAGtCK,GAA+B,CAAC3G,EAAuDsG,IAAsB,CACvFvC,GAAA,CAAC,CAACuC,CAAO,GAG/BM,GAAkC,CAAC5G,EAAuDsG,IAAsB,CACvFrC,GAAA,CAAC,CAACqC,CAAO,GAGlCzF,GAAoBgG,GAAoB,CAC1ClB,EAAekB,CAAO,GAGpBC,GAAiB,CAACjK,EAAkBW,IAAkB,CACpDoE,KAAmB/E,GAAY6H,IAA2BlD,EAAkB,aAAeoD,IAAmBpH,EAC9GmH,EAA0B,MAAS,GAEnCF,EAAkB5H,CAAQ,EAC1B8H,EAA0BnD,EAAkB,WAAW,GAG3DqD,GAAkBrH,CAAK,GAGrBuJ,EAAc,CAACC,EAAwBxJ,IAAkB,CAEvDmH,EADAD,IAA2BsC,GAAOpC,IAAmBpH,EAC3B,OAEAwJ,CAFS,EAKvCnC,GAAkBrH,CAAK,GAG3B,OACKzB,OAAA,OAAI,UAAWF,EAAO,UACnB,UAACE,EAAA,YAAI,UAAWF,EAAO,kBACnB,UAACF,MAAA8G,GAAA,CAAgB,UAAW5G,EAAO,cAAe,QAASkK,GAAW,SAAU,CAAC7B,EAAgB,SAAWG,CAAW,GACvH1I,MAAC4G,GAAe,WAAW1G,EAAO,cAAe,QAAS,IAAMgH,EAAqB,CAACD,CAAiB,EAAG,GAC9G,EACC7G,EAAA,YAAI,UAAWF,EAAO,SACnB,UAACE,EAAA,YAAI,UAAWF,EAAO,cAClB,UAACqI,EAAgB,QAQdnI,OAAC,MAAI,WAAWF,EAAO,kBAClB,UAAAoB,IACG+H,GAAgB,IAAI,CAACiC,EAAgBzJ,WAChC,MACG,WAAA7B,EAAA,IAACmF,EAAgB,SAASmG,EAAe,CAAC,CAAG,GAC5CtL,EAAA,WAAI,UAAWE,EAAO,eACnB,SAAAF,EAAA,IAACmC,GAAA,CACG,YAAa,GAEb,OAAQmJ,EAAe,CAAC,EACxB,WAAY,GACZ,kBAAmBC,GAAKJ,GAAeI,EAAG1J,CAAK,EAC/C,wBAAyB,IAAMuJ,EAAYvF,EAAkB,kBAAmBhE,CAAK,EACrF,2BAA4B,IAAMuJ,EAAYvF,EAAkB,qBAAsBhE,CAAK,EAC3F,0BAAgC2J,GAAAxB,EAAewB,CAAC,EAChD,sBAAuBvD,GAA+BkB,EAAQ,OAAS,IAAMtH,CAAA,EAPxEA,CAAA,EASb,IAdMA,CAeV,CACH,EACJ,CAACP,IACE6H,EAAQ,IAAI,CAAC9H,EAAQQ,WAChB,MACG,WAAA7B,EAAA,IAACmF,EAAgB,SAAS9D,EAAO,CAAC,CAAG,GACpCrB,EAAA,WAAI,UAAWE,EAAO,eACnB,SAAAF,EAAA,IAACmC,GAAA,CACG,YAAa,GAEb,OAAQd,EAAO,CAAC,EAChB,WAAY4H,IAAmBpH,GAASkH,IAA2B,OACnE,kBAAmBwC,GAAKJ,GAAeI,EAAG1J,CAAK,EAC/C,wBAAyB,IAAMuJ,EAAYvF,EAAkB,kBAAmBhE,CAAK,EACrF,2BAA4B,IAAMuJ,EAAYvF,EAAkB,qBAAsBhE,CAAK,EAC3F,0BAAgC2J,GAAAxB,EAAewB,CAAC,EAChD,sBAAuBvD,GAA+BkB,EAAQ,OAAS,IAAMtH,CAAA,EAPxEA,CAAA,EASb,IAdMA,CAeV,CACH,EACJ6G,GAEOtI,EAAA,KAAAqL,WAAA,WAACzL,MAAAmF,EAAA,CAAgB,QAASoD,EAAgB,OAAS,SAClD,MAAI,WAAWrI,EAAO,uBACnB,SAAAF,MAACiD,IAAc,GACnB,GACJ,EAEH1D,EAEOa,EAAA,KAAAqL,WAAA,WAACzL,MAAAmF,EAAA,CAAgB,QAASoD,EAAgB,OAAS,SAClD,MAAI,WAAWrI,EAAO,uBACnB,eAACmD,GAAY,OAAO9D,EAAM,WAAY,QAAS,IAAMyK,EAAezB,EAAgB,OAAO,CAAG,GAClG,GACJ,EACA,KACJvI,MAAC,MAAI,KAAKyI,CAAsB,IACpC,EA/DArI,OAAC,MAAI,WAAWF,EAAO,eACnB,UAACF,MAAA0L,GAAA,CAAc,SAAU,QAAS,YAAa,yBAA0B,cAAY,OAAO,aAAW,WAAY,GAClH1L,EAAA,UAAG,UAAWE,EAAO,oBAAqB,SAAwB,6BAClEF,EAAA,UAAG,UAAWE,EAAO,uBAAwB,SAA2C,gDACzFF,MAACiF,IAAY,iBAAAC,GAAoC,EACrD,GA6DHlF,EAAA,WAAI,UAAWE,EAAO,UACnB,SAAAF,EAAA,IAACyD,GAAA,CACG,YAAW,GACX,YAAY,uFACZ,SAAUiF,EACV,OAAoB5E,GAAAkG,EAAelG,CAAQ,IAEnD,GACJ,EAECqF,EAAQ,OAAS,GAAKJ,GACnB/I,EAAA,IAAC+F,GAAA,CACG,UAAW7F,EAAO,kBAClB,eAAA+F,GACA,mBAAoBjD,GAAKoI,EAAYpI,EAAGiG,CAAc,EACtD,eAAe,QACf,OAAQE,EAAQF,CAAc,EAAE,CAAC,EACjC,UAAWF,CAAA,CACf,EAGJ3I,EAAA,KAACuL,GAAA,CACG,WAAW,oCACX,OAAQ1E,EACR,WAAY,GACZ,UAAW,IAAMC,EAAqB,EAAK,EAC3C,qBAAqB,SACrB,sBAAuB,IAAOlH,MAAAC,GAAA,CAAc,QAAS,IAAMiH,EAAqB,EAAK,EAAG,SAAM,WAC9F,iBAAkB,GAElB,UAAAlH,EAAA,IAACwE,GAAA,CACG,UAAWtE,EAAO,sBAClB,aAAciH,EACd,MAAM,8BACN,UAAS,GACT,iBAAgB,GAChB,SAAUmD,EAAA,CACd,EAEAtK,EAAA,IAAC4L,GAAA,CACG,UAAW1L,EAAO,sBAClB,MAAM,qCACN,IAAK,EACL,IAAK,GACL,aAAcmH,EAAc,SAAS,EACrC,SAAUkD,EAAA,CACd,EACAvK,MAACwE,IAAU,UAAWtE,EAAO,sBAAuB,MAAM,oBAAoB,SAAU4K,GAA0B,EAClH9K,EAAA,IAAC6L,EAAA,CACG,UAAW3L,EAAO,sBAClB,QAASuH,EACT,MAAM,sCACN,SAAUiD,EAAA,CACd,EACA1K,EAAA,IAAC6L,EAAA,CACG,UAAW3L,EAAO,sBAClB,QAAS2H,EACT,MAAM,gEACN,SAAU+C,GACV,SAAU,CAACnD,CAAA,CACf,EACAzH,EAAA,IAAC6L,EAAA,CACG,UAAW3L,EAAO,sBAClB,QAAS+H,EACT,MAAM,yBACN,SAAU8C,EAAA,CACd,EACC/L,GACGgB,EAAA,IAAC6L,EAAA,CACG,UAAW3L,EAAO,sBAClB,QAASiI,GACT,MAAM,0BACN,SAAU,CAAC7I,GAAQ,iBAAiB,EACpC,SAAU0L,EAAA,CACd,EAEHhM,GACGgB,EAAA,IAAC6L,EAAA,CACG,UAAW3L,EAAO,sBAClB,QAASmI,GACT,MAAM,gCACN,SAAU,CAAC/I,GAAQ,iBAAiB,EACpC,SAAU2L,EAAA,CACd,EAEJjL,EAAA,IAAC8L,GAAA,CACG,UAAW5L,EAAO,sBAClB,MAAM,mBACN,QAAS,CACL,CAAE,IAAK,SAAU,KAAM,0BAA2B,SAAUqH,GAAiBpG,EAAc,OAAQ,KAAMA,EAAc,MAAO,EAC9H,CAAE,IAAK,UAAW,KAAM,QAAS,SAAUoG,GAAiBpG,EAAc,QAAS,KAAMA,EAAc,OAAQ,EAC/G,CAAE,IAAK,OAAQ,KAAM,QAAS,SAAUoG,GAAiBpG,EAAc,KAAM,KAAMA,EAAc,IAAK,CAC1G,EACA,SAAQ,GACR,SAAUqJ,EAAA,CACd,EACAxK,EAAA,IAAC6L,EAAA,CACG,UAAW3L,EAAO,sBAClB,QAASyH,EACT,MAAM,gCACN,SAAUkD,EAAA,CACd,GACJ,GACJ,CACJ,GAER,EC1YA,IAAIkB,GACJ,GAAI/M,EAAU,CACN,IAAAgN,EAAe,IAAIC,GAAwBhN,EAAU,EAGrD,CAAC+M,EAAa,iBAAiB,GAAKA,EAAa,eAAe,EAAE,OAAS,GAE9DA,EAAA,iBAAiBA,EAAa,iBAAkB,GAIjEA,EAAa,iBAA0BlC,GAAA,CACnC,GAAIA,EAAM,YAAcoC,GAAU,eAAiBpC,EAAM,QAAS,CAC9D,MAAMqC,EAAUrC,EAAM,QACtBkC,EAAa,iBAAiBG,CAAO,CACzC,EACH,EAEDJ,SACKK,GAAa,UAAUJ,EACpB,SAAAhM,MAACG,IAAO,EACZ,EAER,MACI4L,SAAU5L,GAAO,IAGrBkM,KAEA,MAAMC,GAASC,GAAiB,CAC5B,CACI,KAAM,IACN,QAASR,GACT,SAAU,CACN,CACI,MAAO,GACP,cAAU/E,GAAK,GACnB,EACA,CACI,KAAM,KACN,KAAM,IAAMwF,GAAA,WAAO,uBAAyB,mKAChD,EACA,CACI,KAAM,IACN,KAAM,IAAMA,GAAA,WAAO,sBAAgB,4DACvC,CACJ,CACJ,CACJ,CAAC,EAEDC,GAAS,WAAW,SAAS,eAAe,MAAM,CAAgB,EAAE,aAC/DC,GAAM,WAAN,CACG,SAAC1M,EAAA,IAAA2M,GAAA,CAAe,OAAAL,EAAgB,GACpC,CACJ","names":["fetchAuthSetup","response","authSetup","useLogin","msalConfig","loginRequest","tokenRequest","getRedirectUri","getToken","client","error","b3","LoginButton","instance","useMsal","activeAccount","handleLoginPopup","handleLogoutPopup","logoutText","jsx","DefaultButton","styles","Layout","jsxs","Link","NavLink","isActive","Outlet","BACKEND_URI","getHeaders","idToken","headers","askApi","request","parsedResponse","chatApi","getCitationFilePath","citation","RetrievalMode","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","path","renderToStaticMarkup","AnswerIcon","Chat28Filled","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","followupQuestions","messageContent","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","IconButton","x","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","question","setQuestion","useState","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","sendQuestionDisabled","TextField","Tooltip","Button","Send28Filled","Example","text","value","onClick","EXAMPLES","ExampleList","onExampleClicked","UserChatMessage","message","parseSupportingContentItem","item","parts","title","content","SupportingContent","supportingContent","parsed","AnalysisPanelTabs","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","sanitizedThoughts","Pivot","pivotItem","PivotItem","SettingsButton","Settings24Regular","ClearChatButton","Delete24Regular","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","retrieveCount","setRetrieveCount","retrievalMode","setRetrievalMode","useSemanticRanker","setUseSemanticRanker","shouldStream","setShouldStream","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","lastQuestionRef","useRef","chatMessageStreamEnd","isLoading","setIsLoading","setIsStreaming","setError","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","streamedAnswers","setStreamedAnswers","handleAsyncRequest","responseBody","askResponse","updateState","newContent","resolve","latestResponse","event","readNDJSONStream","makeApiRequest","token","a","e","clearChat","useEffect","onPromptTemplateChange","onRetrieveCountChange","onRetrievalModeChange","option","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onShouldStreamChange","onExcludeCategoryChanged","onUseSuggestFollowupQuestionsChange","onUseOidSecurityFilterChange","onUseGroupsSecurityFilterChange","example","onShowCitation","onToggleTab","tab","streamedAnswer","c","q","Fragment","ChatAddFilled","Panel","SpinButton","Checkbox","Dropdown","layout","msalInstance","PublicClientApplication","EventType","account","MsalProvider","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","RouterProvider"],"sources":["../../../frontend/src/authConfig.ts","../../../frontend/src/assets/b3.svg","../../../frontend/src/components/LoginButton/LoginButton.tsx","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["// Refactored from https://github.com/Azure-Samples/ms-identity-javascript-react-tutorial/blob/main/1-Authentication/1-sign-in/SPA/src/authConfig.js\n\nimport { AuthenticationResult, IPublicClientApplication } from \"@azure/msal-browser\";\n\ninterface AuthSetup {\n    // Set to true if login elements should be shown in the UI\n    useLogin: boolean;\n    /**\n     * Configuration object to be passed to MSAL instance on creation.\n     * For a full list of MSAL.js configuration parameters, visit:\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n     */\n    msalConfig: {\n        auth: {\n            clientId: string; // Client app id used for login\n            authority: string; // Directory to use for login https://learn.microsoft.com/azure/active-directory/develop/msal-client-application-configuration#authority\n            redirectUri: string; // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\n            postLogoutRedirectUri: string; // Indicates the page to navigate after logout.\n            navigateToLoginRequestUrl: boolean; // If \"true\", will navigate back to the original request location before processing the auth code response.\n        };\n        cache: {\n            cacheLocation: string; // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n            storeAuthStateInCookie: boolean; // Set this to \"true\" if you are having issues on IE11 or Edge\n        };\n    };\n    loginRequest: {\n        /**\n         * Scopes you add here will be prompted for user consent during sign-in.\n         * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n         * For more information about OIDC scopes, visit:\n         * https://docs.microsoft.com/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n         */\n        scopes: Array<string>;\n    };\n    tokenRequest: {\n        scopes: Array<string>;\n    };\n}\n\n// Fetch the auth setup JSON data from the API if not already cached\nasync function fetchAuthSetup(): Promise<AuthSetup> {\n    const response = await fetch(\"/auth_setup\");\n    if (!response.ok) {\n        throw new Error(`auth setup response was not ok: ${response.status}`);\n    }\n    return await response.json();\n}\n\nconst authSetup = await fetchAuthSetup();\n\nexport const useLogin = authSetup.useLogin;\n\n/**\n * Configuration object to be passed to MSAL instance on creation.\n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n */\nexport const msalConfig = authSetup.msalConfig;\n\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit:\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n */\nexport const loginRequest = authSetup.loginRequest;\n\nconst tokenRequest = authSetup.tokenRequest;\n\n// Build an absolute redirect URI using the current window's location and the relative redirect URI from auth setup\nexport const getRedirectUri = () => {\n    return window.location.origin + authSetup.msalConfig.auth.redirectUri;\n};\n\n// Get an access token for use with the API server.\n// ID token received when logging in may not be used for this purpose because it has the incorrect audience\nexport const getToken = (client: IPublicClientApplication): Promise<AuthenticationResult | undefined> => {\n    return client\n        .acquireTokenSilent({\n            ...tokenRequest,\n            redirectUri: getRedirectUri()\n        })\n        .catch(error => {\n            console.log(error);\n            return undefined;\n        });\n};\n","export default \"__VITE_ASSET__83dc1b5f__\"","import { DefaultButton } from \"@fluentui/react\";\nimport { useMsal } from \"@azure/msal-react\";\n\nimport styles from \"./LoginButton.module.css\";\nimport { getRedirectUri, loginRequest } from \"../../authConfig\";\n\nimport b3 from \"../../assets/b3.svg\";\n\nexport const LoginButton = () => {\n    const { instance } = useMsal();\n    const activeAccount = instance.getActiveAccount();\n    const handleLoginPopup = () => {\n        /**\n         * When using popup and silent APIs, we recommend setting the redirectUri to a blank page or a page\n         * that does not implement MSAL. Keep in mind that all redirect routes must be registered with the application\n         * For more information, please follow this link: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#redirecturi-considerations\n         */\n        instance\n            .loginPopup({\n                ...loginRequest,\n                redirectUri: getRedirectUri()\n            })\n            .catch(error => console.log(error));\n    };\n    const handleLogoutPopup = () => {\n        instance\n            .logoutPopup({\n                mainWindowRedirectUri: \"/\", // redirects the top level app after logout\n                account: instance.getActiveAccount()\n            })\n            .catch(error => console.log(error));\n    };\n    const logoutText = `Logout\\n${activeAccount?.username}`;\n    return (\n        <DefaultButton\n            text={activeAccount ? logoutText : \"Login\"}\n            className={styles.loginButton}\n            onClick={activeAccount ? handleLogoutPopup : handleLoginPopup}\n        >\n            <img src={b3} alt=\"B3 logo\" aria-label=\"B3\" width=\"20px\" height=\"20px\" className={styles.b3Logo} />\n        </DefaultButton>\n    );\n};\n","import { Outlet, NavLink, Link } from \"react-router-dom\";\n\nimport github from \"../../assets/github.svg\";\nimport hawkia from \"../../assets/hawkia.svg\";\nimport b3 from \"../../assets/b3.svg\";\n\nimport styles from \"./Layout.module.css\";\n\nimport { useLogin } from \"../../authConfig\";\n\nimport { LoginButton } from \"../../components/LoginButton\";\n\nconst Layout = () => {\n    return (\n        <div className={styles.layout}>\n            <header className={styles.header} role={\"banner\"}>\n                <div className={styles.headerContainer}>\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\n                        <h3 className={styles.headerTitle}>Sinacor GPT</h3>\n                    </Link>\n                    <nav>\n                        <ul className={styles.headerNavList}>\n                            <li>\n                                <NavLink to=\"/\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\n                                    Chat\n                                </NavLink>\n                            </li>\n                            <li className={styles.headerNavLeftMargin}>\n                                <NavLink to=\"/qa\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\n                                    Perguntas\n                                </NavLink>\n                            </li>\n                        </ul>\n                    </nav>\n                    <h4 className={styles.headerRightText}>Ambiente PoC</h4>\n                    {useLogin && <LoginButton />}\n                </div>\n            </header>\n\n            <Outlet />\n        </div>\n    );\n};\n\nexport default Layout;\n","const BACKEND_URI = \"\";\n\nimport { ChatAppResponse, ChatAppResponseOrError, ChatAppRequest } from \"./models\";\nimport { useLogin } from \"../authConfig\";\n\nfunction getHeaders(idToken: string | undefined): Record<string, string> {\n    var headers: Record<string, string> = {\n        \"Content-Type\": \"application/json\"\n    };\n    // If using login, add the id token of the logged in account as the authorization\n    if (useLogin) {\n        if (idToken) {\n            headers[\"Authorization\"] = `Bearer ${idToken}`;\n        }\n    }\n\n    return headers;\n}\n\nexport async function askApi(request: ChatAppRequest, idToken: string | undefined): Promise<ChatAppResponse> {\n    const response = await fetch(`${BACKEND_URI}/ask`, {\n        method: \"POST\",\n        headers: getHeaders(idToken),\n        body: JSON.stringify(request)\n    });\n\n    const parsedResponse: ChatAppResponseOrError = await response.json();\n    if (response.status > 299 || !response.ok) {\n        throw Error(parsedResponse.error || \"Unknown error\");\n    }\n\n    return parsedResponse as ChatAppResponse;\n}\n\nexport async function chatApi(request: ChatAppRequest, idToken: string | undefined): Promise<Response> {\n    return await fetch(`${BACKEND_URI}/chat`, {\n        method: \"POST\",\n        headers: getHeaders(idToken),\n        body: JSON.stringify(request)\n    });\n}\n\nexport function getCitationFilePath(citation: string): string {\n    return `${BACKEND_URI}/content/${citation}`;\n}\n","export const enum RetrievalMode {\n    Hybrid = \"hybrid\",\n    Vectors = \"vectors\",\n    Text = \"text\"\n}\n\nexport type ChatAppRequestOverrides = {\n    retrieval_mode?: RetrievalMode;\n    semantic_ranker?: boolean;\n    semantic_captions?: boolean;\n    exclude_category?: string;\n    top?: number;\n    temperature?: number;\n    prompt_template?: string;\n    prompt_template_prefix?: string;\n    prompt_template_suffix?: string;\n    suggest_followup_questions?: boolean;\n    use_oid_security_filter?: boolean;\n    use_groups_security_filter?: boolean;\n};\n\nexport type ResponseMessage = {\n    content: string;\n    role: string;\n};\n\nexport type ResponseContext = {\n    thoughts: string | null;\n    data_points: string[];\n    followup_questions: string[] | null;\n};\n\nexport type ResponseChoice = {\n    index: number;\n    message: ResponseMessage;\n    context: ResponseContext;\n    session_state: any;\n};\n\nexport type ChatAppResponseOrError = {\n    choices?: ResponseChoice[];\n    error?: string;\n};\n\nexport type ChatAppResponse = {\n    choices: ResponseChoice[];\n};\n\nexport type ChatAppRequestContext = {\n    overrides?: ChatAppRequestOverrides;\n};\n\nexport type ChatAppRequest = {\n    messages: ResponseMessage[];\n    context?: ChatAppRequestContext;\n    stream?: boolean;\n    session_state: any;\n};\n","import { renderToStaticMarkup } from \"react-dom/server\";\nimport { getCitationFilePath } from \"../../api\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: string[];\n};\n\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\n    const citations: string[] = [];\n\n    // trim any whitespace from the end of the answer after removing follow-up questions\n    let parsedAnswer = answer.trim();\n\n    // Omit a citation that is still being typed during streaming\n    if (isStreaming) {\n        let lastIndex = parsedAnswer.length;\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\n            if (parsedAnswer[i] === \"]\") {\n                break;\n            } else if (parsedAnswer[i] === \"[\") {\n                lastIndex = i;\n                break;\n            }\n        }\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\n        parsedAnswer = truncatedAnswer;\n    }\n\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 2 === 0) {\n            return part;\n        } else {\n            let citationIndex: number;\n            if (citations.indexOf(part) !== -1) {\n                citationIndex = citations.indexOf(part) + 1;\n            } else {\n                citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            const path = getCitationFilePath(part);\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        }\n    });\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations\n    };\n}\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\nimport { Chat28Filled } from \"@fluentui/react-icons\";\n\nexport const AnswerIcon = () => {\n    return <Chat28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\n};\n","import { useMemo } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./Answer.module.css\";\n\nimport { ChatAppResponse, getCitationFilePath } from \"../../api\";\nimport { parseAnswerToHtml } from \"./AnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\ninterface Props {\n    answer: ChatAppResponse;\n    isSelected?: boolean;\n    isStreaming: boolean;\n    onCitationClicked: (filePath: string) => void;\n    onThoughtProcessClicked: () => void;\n    onSupportingContentClicked: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    showFollowupQuestions?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    isSelected,\n    isStreaming,\n    onCitationClicked,\n    onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    showFollowupQuestions\n}: Props) => {\n    const followupQuestions = answer.choices[0].context.followup_questions;\n    const messageContent = answer.choices[0].message.content;\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(messageContent, isStreaming, onCitationClicked), [answer]);\n\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            <Stack.Item>\n                <Stack horizontal horizontalAlign=\"space-between\">\n                    <AnswerIcon />\n                    <div>\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"Lightbulb\" }}\n                            title=\"Mostrar processo de pensamento\"\n                            ariaLabel=\"Mostrar processo de pensamento\"\n                            onClick={() => onThoughtProcessClicked()}\n                            disabled={!answer.choices[0].context.thoughts?.length}\n                        />\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"ClipboardList\" }}\n                            title=\"Mostrar conteúdo de apoio\"\n                            ariaLabel=\"Mostrar conteúdo de apoio\"\n                            onClick={() => onSupportingContentClicked()}\n                            disabled={!answer.choices[0].context.data_points?.length}\n                        />\n                    </div>\n                </Stack>\n            </Stack.Item>\n\n            <Stack.Item grow>\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                        <span className={styles.citationLearnMore}>Saiba mais:</span>\n                        {parsedAnswer.citations.map((x, i) => {\n                            const path = getCitationFilePath(x);\n                            return (\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\n                                    {`${++i}. ${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>Follow-ups:</span>\n                        {followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n        </Stack>\n    );\n};\n","import { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\n\nimport styles from \"./Answer.module.css\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\nexport const AnswerLoading = () => {\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                <AnswerIcon />\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        Respondendo\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Tente novamente\" />\n        </Stack>\n    );\n};\n","import { useState } from \"react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Button, Tooltip, Field, Textarea } from \"@fluentui/react-components\";\nimport { Send28Filled } from \"@fluentui/react-icons\";\n\nimport styles from \"./QuestionInput.module.css\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    placeholder?: string;\n    clearOnSend?: boolean;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n    };\n\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    const sendQuestionDisabled = disabled || !question.trim();\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <TextField\n                className={styles.questionInputTextArea}\n                placeholder={placeholder}\n                multiline\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <Tooltip content=\"Faça uma pergunta\" relationship=\"label\">\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\n                </Tooltip>\n            </div>\n        </Stack>\n    );\n};\n","import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <p className={styles.exampleText}>{text}</p>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\n\nimport styles from \"./Example.module.css\";\n\nexport type ExampleModel = {\n    text: string;\n    value: string;\n};\n\nconst EXAMPLES: ExampleModel[] = [\n    {\n        text: \"Quais são os principais componentes do FixGear?\",\n        value: \"Quais são os principais componentes do FixGear?\"\n    },\n    {\n        text: \"Qual consulta valida se o módulo de Faturamento BMF está instalado?\",\n        value: \"Qual consulta valida se o módulo de Faturamento BMF está instalado?\"\n    },\n    { text: \"É possível liquidar contratos comprados a termo?\", value: \"É possível liquidar contratos comprados a termo?\" }\n];\n\ninterface Props {\n    onExampleClicked: (value: string) => void;\n}\n\nexport const ExampleList = ({ onExampleClicked }: Props) => {\n    return (\n        <ul className={styles.examplesNavList}>\n            {EXAMPLES.map((x, i) => (\n                <li key={i}>\n                    <Example text={x.text} value={x.value} onClick={onExampleClicked} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import styles from \"./UserChatMessage.module.css\";\n\ninterface Props {\n    message: string;\n}\n\nexport const UserChatMessage = ({ message }: Props) => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","type ParsedSupportingContentItem = {\n    title: string;\n    content: string;\n};\n\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\n    // Assumes the item starts with the file name followed by : and the content.\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\n    const parts = item.split(\": \");\n    const title = parts[0];\n    const content = parts.slice(1).join(\": \");\n\n    return {\n        title,\n        content\n    };\n}\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\n\nimport styles from \"./SupportingContent.module.css\";\n\ninterface Props {\n    supportingContent: string[];\n}\n\nexport const SupportingContent = ({ supportingContent }: Props) => {\n    return (\n        <ul className={styles.supportingContentNavList}>\n            {supportingContent.map((x, i) => {\n                const parsed = parseSupportingContentItem(x);\n\n                return (\n                    <li className={styles.supportingContentItem}>\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\n                        <p className={styles.supportingContentItemText}>{parsed.content}</p>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","export enum AnalysisPanelTabs {\n    ThoughtProcessTab = \"thoughtProcess\",\n    SupportingContentTab = \"supportingContent\",\n    CitationTab = \"citation\"\n}\n","import { Pivot, PivotItem } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { SupportingContent } from \"../SupportingContent\";\nimport { ChatAppResponse } from \"../../api\";\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\n\ninterface Props {\n    className: string;\n    activeTab: AnalysisPanelTabs;\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\n    activeCitation: string | undefined;\n    citationHeight: string;\n    answer: ChatAppResponse;\n}\n\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\n\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\n    const isDisabledThoughtProcessTab: boolean = !answer.choices[0].context.thoughts;\n    const isDisabledSupportingContentTab: boolean = !answer.choices[0].context.data_points.length;\n    const isDisabledCitationTab: boolean = !activeCitation;\n\n    const sanitizedThoughts = DOMPurify.sanitize(answer.choices[0].context.thoughts!);\n\n    return (\n        <Pivot\n            className={className}\n            selectedKey={activeTab}\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\n        >\n            <PivotItem\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\n                headerText=\"Processo de pensamento\"\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\n            >\n                <div className={styles.thoughtProcess} dangerouslySetInnerHTML={{ __html: sanitizedThoughts }}></div>\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\n                headerText=\"Conteúdo de apoio\"\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\n            >\n                <SupportingContent supportingContent={answer.choices[0].context.data_points} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.CitationTab}\n                headerText=\"Citação\"\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\n            >\n                <iframe title=\"Citação\" src={activeCitation} width=\"100%\" height={citationHeight} />\n            </PivotItem>\n        </Pivot>\n    );\n};\n","import { Settings24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\n\nimport styles from \"./SettingsButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nexport const SettingsButton = ({ className, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Settings24Regular />} onClick={onClick}>\n                {\"Configurações\"}\n            </Button>\n        </div>\n    );\n};\n","import { Delete24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\n                {\"Limpar chat\"}\n            </Button>\n        </div>\n    );\n};\n","import { useRef, useState, useEffect } from \"react\";\nimport { Checkbox, Panel, DefaultButton, TextField, SpinButton, Dropdown, IDropdownOption } from \"@fluentui/react\";\nimport { ChatAddFilled } from \"@fluentui/react-icons\";\nimport readNDJSONStream from \"ndjson-readablestream\";\n\nimport styles from \"./Chat.module.css\";\n\nimport { chatApi, RetrievalMode, ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, ResponseMessage } from \"../../api\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\nimport { useLogin, getToken } from \"../../authConfig\";\nimport { useMsal } from \"@azure/msal-react\";\n\nconst Chat = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n\n    const handleAsyncRequest = async (question: string, answers: [string, ChatAppResponse][], setAnswers: Function, responseBody: ReadableStream<any>) => {\n        let answer: string = \"\";\n        let askResponse: ChatAppResponse = {} as ChatAppResponse;\n\n        const updateState = (newContent: string) => {\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    answer += newContent;\n                    const latestResponse: ChatAppResponse = {\n                        ...askResponse,\n                        choices: [{ ...askResponse.choices[0], message: { content: answer, role: askResponse.choices[0].message.role } }]\n                    };\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\n                    resolve(null);\n                }, 33);\n            });\n        };\n        try {\n            setIsStreaming(true);\n            for await (const event of readNDJSONStream(responseBody)) {\n                if (event[\"choices\"] && event[\"choices\"][0][\"context\"] && event[\"choices\"][0][\"context\"][\"data_points\"]) {\n                    event[\"choices\"][0][\"message\"] = event[\"choices\"][0][\"delta\"];\n                    askResponse = event as ChatAppResponse;\n                } else if (event[\"choices\"] && event[\"choices\"][0][\"delta\"][\"content\"]) {\n                    setIsLoading(false);\n                    await updateState(event[\"choices\"][0][\"delta\"][\"content\"]);\n                } else if (event[\"choices\"] && event[\"choices\"][0][\"context\"]) {\n                    // Update context with new keys from latest event\n                    askResponse.choices[0].context = { ...askResponse.choices[0].context, ...event[\"choices\"][0][\"context\"] };\n                } else if (event[\"error\"]) {\n                    throw Error(event[\"error\"]);\n                }\n            }\n        } finally {\n            setIsStreaming(false);\n        }\n        const fullResponse: ChatAppResponse = {\n            ...askResponse,\n            choices: [{ ...askResponse.choices[0], message: { content: answer, role: askResponse.choices[0].message.role } }]\n        };\n        return fullResponse;\n    };\n\n    const client = useLogin ? useMsal().instance : undefined;\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        const token = client ? await getToken(client) : undefined;\n\n        try {\n            const messages: ResponseMessage[] = answers.flatMap(a => [\n                { content: a[0], role: \"user\" },\n                { content: a[1].choices[0].message.content, role: \"assistant\" }\n            ]);\n\n            const request: ChatAppRequest = {\n                messages: [...messages, { content: question, role: \"user\" }],\n                stream: shouldStream,\n                context: {\n                    overrides: {\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\n                        top: retrieveCount,\n                        retrieval_mode: retrievalMode,\n                        semantic_ranker: useSemanticRanker,\n                        semantic_captions: useSemanticCaptions,\n                        suggest_followup_questions: useSuggestFollowupQuestions,\n                        use_oid_security_filter: useOidSecurityFilter,\n                        use_groups_security_filter: useGroupsSecurityFilter\n                    }\n                },\n                // ChatAppProtocol: Client must pass on any session state received from the server\n                session_state: answers.length ? answers[answers.length - 1][1].choices[0].session_state : null\n            };\n\n            const response = await chatApi(request, token?.accessToken);\n            if (!response.body) {\n                throw Error(\"No response body\");\n            }\n            if (shouldStream) {\n                const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, setAnswers, response.body);\n                setAnswers([...answers, [question, parsedResponse]]);\n            } else {\n                const parsedResponse: ChatAppResponseOrError = await response.json();\n                if (response.status > 299 || !response.ok) {\n                    throw Error(parsedResponse.error || \"Unknown error\");\n                }\n                setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\n            }\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n        setAnswers([]);\n        setStreamedAnswers([]);\n        setIsLoading(false);\n        setIsStreaming(false);\n    };\n\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined, index?: number | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onShouldStreamChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setShouldStream(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSuggestFollowupQuestions(!!checked);\n    };\n\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseOidSecurityFilter(!!checked);\n    };\n\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseGroupsSecurityFilter(!!checked);\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string, index: number) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.commandsContainer}>\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n            </div>\n            <div className={styles.chatRoot}>\n                <div className={styles.chatContainer}>\n                    {!lastQuestionRef.current ? (\n                        <div className={styles.chatEmptyState}>\n                            <ChatAddFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" />\n                            <h2 className={styles.chatEmptyStateTitle}>Converse sobre o Sinacor</h2>\n                            <h3 className={styles.chatEmptyStateSubtitle}>Pergunte qualquer coisa ou tente um exemplo</h3>\n                            <ExampleList onExampleClicked={onExampleClicked} />\n                        </div>\n                    ) : (\n                        <div className={styles.chatMessageStream}>\n                            {isStreaming &&\n                                streamedAnswers.map((streamedAnswer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={streamedAnswer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={true}\n                                                key={index}\n                                                answer={streamedAnswer[1]}\n                                                isSelected={false}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {!isStreaming &&\n                                answers.map((answer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={answer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={false}\n                                                key={index}\n                                                answer={answer[1]}\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {isLoading && (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerLoading />\n                                    </div>\n                                </>\n                            )}\n                            {error ? (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                                    </div>\n                                </>\n                            ) : null}\n                            <div ref={chatMessageStreamEnd} />\n                        </div>\n                    )}\n\n                    <div className={styles.chatInput}>\n                        <QuestionInput\n                            clearOnSend\n                            placeholder=\"Digite uma pergunta (por exemplo, quem é responsável pelo cadastro de novos bancos?)\"\n                            disabled={isLoading}\n                            onSend={question => makeApiRequest(question)}\n                        />\n                    </div>\n                </div>\n\n                {answers.length > 0 && activeAnalysisPanelTab && (\n                    <AnalysisPanel\n                        className={styles.chatAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\n                        citationHeight=\"810px\"\n                        answer={answers[selectedAnswer][1]}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n\n                <Panel\n                    headerText=\"Configurar a geração de respostas\"\n                    isOpen={isConfigPanelOpen}\n                    isBlocking={false}\n                    onDismiss={() => setIsConfigPanelOpen(false)}\n                    closeButtonAriaLabel=\"Fechar\"\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Fechar</DefaultButton>}\n                    isFooterAtBottom={true}\n                >\n                    <TextField\n                        className={styles.chatSettingsSeparator}\n                        defaultValue={promptTemplate}\n                        label=\"Substituir modelo de prompt\"\n                        multiline\n                        autoAdjustHeight\n                        onChange={onPromptTemplateChange}\n                    />\n\n                    <SpinButton\n                        className={styles.chatSettingsSeparator}\n                        label=\"Resultados de pesquisa a recuperar\"\n                        min={1}\n                        max={50}\n                        defaultValue={retrieveCount.toString()}\n                        onChange={onRetrieveCountChange}\n                    />\n                    <TextField className={styles.chatSettingsSeparator} label=\"Excluir categoria\" onChange={onExcludeCategoryChanged} />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSemanticRanker}\n                        label=\"Classificador semântico na pesquisa\"\n                        onChange={onUseSemanticRankerChange}\n                    />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSemanticCaptions}\n                        label=\"Resumos contextuais de consulta em vez de documentos inteiros\"\n                        onChange={onUseSemanticCaptionsChange}\n                        disabled={!useSemanticRanker}\n                    />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSuggestFollowupQuestions}\n                        label=\"Perguntas de follow-up\"\n                        onChange={onUseSuggestFollowupQuestionsChange}\n                    />\n                    {useLogin && (\n                        <Checkbox\n                            className={styles.chatSettingsSeparator}\n                            checked={useOidSecurityFilter}\n                            label=\"Filtro de segurança oid\"\n                            disabled={!client?.getActiveAccount()}\n                            onChange={onUseOidSecurityFilterChange}\n                        />\n                    )}\n                    {useLogin && (\n                        <Checkbox\n                            className={styles.chatSettingsSeparator}\n                            checked={useGroupsSecurityFilter}\n                            label=\"Filtro de segurança de grupos\"\n                            disabled={!client?.getActiveAccount()}\n                            onChange={onUseGroupsSecurityFilterChange}\n                        />\n                    )}\n                    <Dropdown\n                        className={styles.chatSettingsSeparator}\n                        label=\"Modo de pesquisa\"\n                        options={[\n                            { key: \"hybrid\", text: \"Vetor + Texto (Híbrido)\", selected: retrievalMode == RetrievalMode.Hybrid, data: RetrievalMode.Hybrid },\n                            { key: \"vectors\", text: \"Vetor\", selected: retrievalMode == RetrievalMode.Vectors, data: RetrievalMode.Vectors },\n                            { key: \"text\", text: \"Texto\", selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\n                        ]}\n                        required\n                        onChange={onRetrievalModeChange}\n                    />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={shouldStream}\n                        label=\"Streaming de respostas (chat)\"\n                        onChange={onShouldStreamChange}\n                    />\n                </Panel>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\nimport { initializeIcons } from \"@fluentui/react\";\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { PublicClientApplication, EventType, AccountInfo } from \"@azure/msal-browser\";\nimport { msalConfig, useLogin } from \"./authConfig\";\n\nimport \"./index.css\";\n\nimport Layout from \"./pages/layout/Layout\";\nimport Chat from \"./pages/chat/Chat\";\n\nvar layout;\nif (useLogin) {\n    var msalInstance = new PublicClientApplication(msalConfig);\n\n    // Default to using the first account if no account is active on page load\n    if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\n        // Account selection logic is app dependent. Adjust as needed for different use cases.\n        msalInstance.setActiveAccount(msalInstance.getActiveAccount());\n    }\n\n    // Listen for sign-in event and set active account\n    msalInstance.addEventCallback(event => {\n        if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\n            const account = event.payload as AccountInfo;\n            msalInstance.setActiveAccount(account);\n        }\n    });\n\n    layout = (\n        <MsalProvider instance={msalInstance}>\n            <Layout />\n        </MsalProvider>\n    );\n} else {\n    layout = <Layout />;\n}\n\ninitializeIcons();\n\nconst router = createHashRouter([\n    {\n        path: \"/\",\n        element: layout,\n        children: [\n            {\n                index: true,\n                element: <Chat />\n            },\n            {\n                path: \"qa\",\n                lazy: () => import(\"./pages/oneshot/OneShot\")\n            },\n            {\n                path: \"*\",\n                lazy: () => import(\"./pages/NoPage\")\n            }\n        ]\n    }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n    <React.StrictMode>\n        <RouterProvider router={router} />\n    </React.StrictMode>\n);\n"],"file":"assets/index-5299deaf.js"}