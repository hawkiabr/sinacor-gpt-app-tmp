{"version":3,"file":"OneShot-f11ffd89.js","sources":["../../../frontend/src/components/TokenClaimsDisplay/TokenClaimsDisplay.tsx","../../../frontend/src/pages/oneshot/OneShot.tsx"],"sourcesContent":["import { Label } from \"@fluentui/react\";\nimport { useMsal } from \"@azure/msal-react\";\nimport {\n    DataGridBody,\n    DataGridRow,\n    DataGrid,\n    DataGridHeader,\n    DataGridHeaderCell,\n    DataGridCell,\n    createTableColumn,\n    TableColumnDefinition\n} from \"@fluentui/react-table\";\nimport { appServicesToken } from \"../../authConfig\";\n\ntype Claim = {\n    name: string;\n    value: string;\n};\n\nexport const TokenClaimsDisplay = () => {\n    const { instance } = useMsal();\n    const activeAccount = instance.getActiveAccount();\n\n    const ToString = (a: string | any) => {\n        if (typeof a === \"string\") {\n            return a;\n        } else {\n            return JSON.stringify(a);\n        }\n    };\n\n    let createClaims = (o: Record<string, unknown> | undefined) => {\n        return Object.keys(o ?? {}).map((key: string) => {\n            let originalKey = key;\n            try {\n                // Some claim names may be a URL to a full schema, just use the last part of the URL in this case\n                const url = new URL(key);\n                const parts = url.pathname.split(\"/\");\n                key = parts[parts.length - 1];\n            } catch (error) {\n                // Do not parse key if it's not a URL\n            }\n            return { name: key, value: ToString((o ?? {})[originalKey]) };\n        });\n    };\n    const items: Claim[] = createClaims(activeAccount?.idTokenClaims ?? appServicesToken?.user_claims);\n\n    const columns: TableColumnDefinition<Claim>[] = [\n        createTableColumn<Claim>({\n            columnId: \"name\",\n            compare: (a: Claim, b: Claim) => {\n                return a.name.localeCompare(b.name);\n            },\n            renderHeaderCell: () => {\n                return \"Name\";\n            },\n            renderCell: item => {\n                return item.name;\n            }\n        }),\n        createTableColumn<Claim>({\n            columnId: \"value\",\n            compare: (a: Claim, b: Claim) => {\n                return a.value.localeCompare(b.value);\n            },\n            renderHeaderCell: () => {\n                return \"Value\";\n            },\n            renderCell: item => {\n                return item.value;\n            }\n        })\n    ];\n\n    return (\n        <div>\n            <Label>ID Token Claims</Label>\n            <DataGrid items={items} columns={columns} sortable getRowId={item => item.name}>\n                <DataGridHeader>\n                    <DataGridRow>{({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}</DataGridRow>\n                </DataGridHeader>\n                <DataGridBody<Claim>>\n                    {({ item, rowId }) => <DataGridRow<Claim> key={rowId}>{({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}</DataGridRow>}\n                </DataGridBody>\n            </DataGrid>\n        </div>\n    );\n};\n","import { useEffect, useRef, useState } from \"react\";\nimport { Checkbox, Panel, DefaultButton, Spinner, TextField, SpinButton, IDropdownOption, Dropdown } from \"@fluentui/react\";\n\nimport styles from \"./OneShot.module.css\";\n\nimport { askApi, configApi, ChatAppResponse, ChatAppRequest, RetrievalMode, VectorFieldOptions, GPT4VInput } from \"../../api\";\nimport { Answer, AnswerError } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\nimport { useLogin, getToken, isLoggedIn, requireAccessControl } from \"../../authConfig\";\nimport { VectorSettings } from \"../../components/VectorSettings\";\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\n\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\n\nimport { useMsal } from \"@azure/msal-react\";\n\nexport function Component(): JSX.Element {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [question, setQuestion] = useState<string>(\"\");\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding]);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n    const [answer, setAnswer] = useState<ChatAppResponse>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const client = useLogin ? useMsal().instance : undefined;\n\n    const getConfig = async () => {\n        const token = client ? await getToken(client) : undefined;\n\n        configApi(token).then(config => {\n            setShowGPT4VOptions(config.showGPT4VOptions);\n        });\n    };\n\n    useEffect(() => {\n        getConfig();\n    }, []);\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        const token = client ? await getToken(client) : undefined;\n\n        try {\n            const request: ChatAppRequest = {\n                messages: [\n                    {\n                        content: question,\n                        role: \"user\"\n                    }\n                ],\n                context: {\n                    overrides: {\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        prompt_template_prefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\n                        prompt_template_suffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\n                        top: retrieveCount,\n                        retrieval_mode: retrievalMode,\n                        semantic_ranker: useSemanticRanker,\n                        semantic_captions: useSemanticCaptions,\n                        use_oid_security_filter: useOidSecurityFilter,\n                        use_groups_security_filter: useGroupsSecurityFilter,\n                        vector_fields: vectorFieldList,\n                        use_gpt4v: useGPT4V,\n                        gpt4v_input: gpt4vInput\n                    }\n                },\n                // ChatAppProtocol: Client must pass on any session state received from the server\n                session_state: answer ? answer.choices[0].session_state : null\n            };\n            const result = await askApi(request, token);\n            setAnswer(result);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onPromptTemplatePrefixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplatePrefix(newValue || \"\");\n    };\n\n    const onPromptTemplateSuffixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplateSuffix(newValue || \"\");\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined, index?: number | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n        setQuestion(example);\n    };\n\n    const onShowCitation = (citation: string) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\n        if (activeAnalysisPanelTab === tab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n    };\n\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseOidSecurityFilter(!!checked);\n    };\n\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseGroupsSecurityFilter(!!checked);\n    };\n\n    return (\n        <div className={styles.oneshotContainer}>\n            <div className={styles.oneshotTopSection}>\n                <SettingsButton className={styles.settingsButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n                <h1 className={styles.oneshotTitle}>Dúvidas sobre o Sinacor?</h1>\n                <div className={styles.oneshotQuestionInput}>\n                    <QuestionInput\n                        placeholder=\"Digite uma pergunta (por exemplo, o que são os eventos corporativos?)\"\n                        disabled={isLoading}\n                        initQuestion={question}\n                        onSend={question => makeApiRequest(question)}\n                    />\n                </div>\n            </div>\n            <div className={styles.oneshotBottomSection}>\n                {isLoading && <Spinner label=\"Respondendo\" />}\n                {!lastQuestionRef.current && <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />}\n                {!isLoading && answer && !error && (\n                    <div className={styles.oneshotAnswerContainer}>\n                        <Answer\n                            answer={answer}\n                            isStreaming={false}\n                            onCitationClicked={x => onShowCitation(x)}\n                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab)}\n                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab)}\n                        />\n                    </div>\n                )}\n                {error ? (\n                    <div className={styles.oneshotAnswerContainer}>\n                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                    </div>\n                ) : null}\n                {activeAnalysisPanelTab && answer && (\n                    <AnalysisPanel\n                        className={styles.oneshotAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x)}\n                        citationHeight=\"600px\"\n                        answer={answer}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n            </div>\n\n            <Panel\n                headerText=\"Configurar a geração de respostas\"\n                isOpen={isConfigPanelOpen}\n                isBlocking={false}\n                onDismiss={() => setIsConfigPanelOpen(false)}\n                closeButtonAriaLabel=\"Fechar\"\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Fechar</DefaultButton>}\n                isFooterAtBottom={true}\n            >\n                <TextField\n                    className={styles.oneshotSettingsSeparator}\n                    defaultValue={promptTemplate}\n                    label=\"Substituir modelo de prompt\"\n                    multiline\n                    autoAdjustHeight\n                    onChange={onPromptTemplateChange}\n                />\n                <SpinButton\n                    className={styles.oneshotSettingsSeparator}\n                    label=\"Resultados de pesquisa a recuperar\"\n                    min={1}\n                    max={50}\n                    defaultValue={retrieveCount.toString()}\n                    onChange={onRetrieveCountChange}\n                />\n                <TextField className={styles.oneshotSettingsSeparator} label=\"Excluir categoria\" onChange={onExcludeCategoryChanged} />\n                <Checkbox\n                    className={styles.oneshotSettingsSeparator}\n                    checked={useSemanticRanker}\n                    label=\"Usar classificador semântico na pesquisa\"\n                    onChange={onUseSemanticRankerChange}\n                />\n                <Checkbox\n                    className={styles.oneshotSettingsSeparator}\n                    checked={useSemanticCaptions}\n                    label=\"Pesquisas contextuais resumidas ao invés de documentos completos\"\n                    onChange={onUseSemanticCaptionsChange}\n                    disabled={!useSemanticRanker}\n                />\n\n                {showGPT4VOptions && (\n                    <GPT4VSettings\n                        gpt4vInputs={gpt4vInput}\n                        isUseGPT4V={useGPT4V}\n                        updateUseGPT4V={useGPT4V => {\n                            setUseGPT4V(useGPT4V);\n                        }}\n                        updateGPT4VInputs={inputs => setGPT4VInput(inputs)}\n                    />\n                )}\n\n                <VectorSettings\n                    showImageOptions={useGPT4V && showGPT4VOptions}\n                    updateVectorFields={(options: VectorFieldOptions[]) => setVectorFieldList(options)}\n                    updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)}\n                />\n\n                {useLogin && (\n                    <Checkbox\n                        className={styles.oneshotSettingsSeparator}\n                        checked={useOidSecurityFilter}\n                        label=\"Filtro de segurança oid\"\n                        disabled={!client?.getActiveAccount()}\n                        onChange={onUseOidSecurityFilterChange}\n                    />\n                )}\n                {useLogin && (\n                    <Checkbox\n                        className={styles.oneshotSettingsSeparator}\n                        checked={useGroupsSecurityFilter || requireAccessControl}\n                        label=\"Filtro de segurança de grupos\"\n                        disabled={!isLoggedIn(client) || requireAccessControl}\n                        onChange={onUseGroupsSecurityFilterChange}\n                    />\n                )}\n                {useLogin && <TokenClaimsDisplay />}\n            </Panel>\n        </div>\n    );\n}\n\nComponent.displayName = \"OneShot\";\n"],"names":["TokenClaimsDisplay","instance","useMsal","activeAccount","ToString","a","items","o","key","originalKey","parts","appServicesToken","columns","createTableColumn","b","item","jsx","Label","jsxs","DataGrid","DataGridHeader","DataGridRow","renderHeaderCell","DataGridHeaderCell","DataGridBody","rowId","renderCell","DataGridCell","Component","isConfigPanelOpen","setIsConfigPanelOpen","useState","promptTemplate","setPromptTemplate","promptTemplatePrefix","setPromptTemplatePrefix","promptTemplateSuffix","setPromptTemplateSuffix","retrievalMode","setRetrievalMode","RetrievalMode","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","useGPT4V","setUseGPT4V","gpt4vInput","setGPT4VInput","GPT4VInput","excludeCategory","setExcludeCategory","question","setQuestion","vectorFieldList","setVectorFieldList","VectorFieldOptions","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","showGPT4VOptions","setShowGPT4VOptions","lastQuestionRef","useRef","isLoading","setIsLoading","error","setError","answer","setAnswer","activeCitation","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","client","useLogin","getConfig","token","getToken","configApi","config","useEffect","makeApiRequest","request","result","askApi","e","onPromptTemplateChange","_ev","newValue","onRetrieveCountChange","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onExcludeCategoryChanged","onExampleClicked","example","onShowCitation","citation","AnalysisPanelTabs","onToggleTab","tab","onUseOidSecurityFilterChange","onUseGroupsSecurityFilterChange","styles","SettingsButton","QuestionInput","Spinner","ExampleList","Answer","x","AnswerError","AnalysisPanel","Panel","DefaultButton","TextField","SpinButton","Checkbox","GPT4VSettings","inputs","VectorSettings","options","requireAccessControl","isLoggedIn"],"mappings":"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"}